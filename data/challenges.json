{
    "mergeSortedArray": {
        "url": "https://www.gillmeister-software.com/online-tools/text/remove-line-breaks.aspx",
        "refName": "mergeSortedArray",
        "refNumber": 1,
        "category": "Array",
        "dificulty": "Easy",
        "title": "Merged Sorted Array",
        "tags": ["Easy", "Array"],
        "description": "<p>You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.</p><p>Merge nums1 and nums2 into a single array sorted in non-decreasing order.</p><p>The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.</p>",
        "examples": {
            "example1": {
                "input": "nums1 = [1,2,3,0,0,0];\nm = 3;\nnums2 = [2,5,6];\nn = 3;",
                "output": "[1,2,2,3,5,6]\n//Explanation:\n//The arrays we are merging are [1,2,3] and [2,5,6]"
            },
            "example2": {
                "input": "      5\n    /   |x5C \n  5      5</",
                "output": "[1,2,2,3,5,6]"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function mergeSortedArray(nums1, m, nums2, n) {\n  // Write your solution...\n  return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// Solution 1\nfunction mergeSortedArray(nums1, m, nums2, n) {\n    let first = m - 1;\n    let second = n - 1;\n    let i = m + n - 1;\n    while (second >= 0) {\n        let fVal = nums1[first];\n        let sVal = nums2[second];\n        if (fVal > sVal) {\n            nums1[i] = fVal;\n            i--;\n            first--;\n        } else {\n            nums1[i] = sVal;\n            i--;\n            second--;\n        }\n    }\n    return nums1;\n}",
                "// Solution 2\nfunction mergeSortedArray(nums1, m, nums2, n) {\n    let p1 = m - 1;\n    let p2 = n - 1;\n    let p3 = m + n - 1;\n    while (p2 >= 0) {\n      nums1[p3--] = p1 >= 0 && nums1[p1] > nums2[p2] ? nums1[p1--] : nums2[p2--];\n    }\n}"
            ]
        },
        "submittedCode": {
            "javaScript": "function mergeSortedArray(nums1, m, nums2, n) {\n    let first = m - 1;\n    let second = n - 1;\n    let i = m + n - 1;\n    while (second >= 0) {\n        let fVal = nums1[first];\n        let sVal = nums2[second];\n        if (fVal > sVal) {\n            nums1[i] = fVal;\n            i--;\n            first--;\n        } else {\n            nums1[i] = sVal;\n            i--;\n            second--;\n        }\n    }\n    return nums1;\n}"
        },
        "testCases": {
            "Test_1": {
                "test_input": [[1, 2, 3, 0, 0, 0], 3, [2, 5, 6], 3],
                "test_expected": [1, 2, 2, 3, 5, 6],
                "code_output": null,
                "passed_test": false
            },
            "Test_2": {
                "test_input": [[1], 1, [], 0],
                "test_expected": [1],
                "code_output": null,
                "passed_test": false
            },
            "Test_3": {
                "test_input": [[0], 0, [1], 1],
                "test_expected": [1],
                "code_output": null,
                "passed_test": false
            },
            "Test_4": {
                "test_input": [[2, 5, 6], 3, [1, 2, 3, 0, 0, 0], 3],
                "test_expected": [1, 2, 2, 3, 5, 6],
                "code_output": null,
                "passed_test": false
            },
            "Test_5": {
                "test_input": [[1, 2, 3, 4, 5], 3, [4, 5, 6, 7, 8], 3],
                "test_expected": [1, 2, 3, 4, 5, 6],
                "code_output": null,
                "passed_test": false
            }
        }
    },
    "stringRotation": {
        "refName": "stringRotation",
        "refNumber": 2,
        "category": "String",
        "dificulty": "Easy",
        "title": "String Rotation",
        "tags": ["Easy", "String"],
        "description": "<p>There are three types of edits that can be performed on strings: Assume you have a method isSubstring which checks if one word is a substring of another.</p><p>Given two strings, sl and s2, write code to check if s2 is a rotation of sl using only one call to isSubstring.</p>",
        "examples": {
            "example1": {
                "input": "s1 = 'waterbottle';\ns2 = 'erbottlewat';",
                "output": "true"
            },
            "example2": {
                "input": "s1 = 'teaspoon';\ns2 = 'spoontea';",
                "output": "false"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function stringRotation(s1, s2) {\n    // Write your solution...\n    return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// Solution 1\nfunction stringRotation(s1, s2) {\n    if (s1.length !== s2.length) return false;\n    const s1s1 = s1 + s1;\n    return s1s1.includes(s2);\n}"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["waterbottle", "erbottlewat"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_2": {
                "test_input": ["teaspoon", "poonteas"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_3": {
                "test_input": ["miniCar", "Carmini"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_4": {
                "test_input": ["houses", "sehou"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            },
            "Test_5": {
                "test_input": ["power-bank", "bankpower"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            },
            "Test_6": {
                "test_input": ["Jhony", "JhonY"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            }
        }
    },
    "uniqueChar": {
        "refName": "uniqueChar",
        "refNumber": 3,
        "category": "String",
        "dificulty": "Easy",
        "title": "Unique Char",
        "tags": ["Easy", "String"],
        "description": "<p>Given a string, determine if the string has all unique characters.</p><p>What if you cannot use additional data structures?</p>",
        "examples": {
            "example1": {
                "input": "'abcd'",
                "output": "true"
            },
            "example2": {
                "input": "'aabcd'",
                "output": "false"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function uniqueChar(str) {\n    // Write your solution...\n    return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// Solution 1\nfunction uniqueChar(str) {\n    const list = new Set();\n    for (const letter of str) {\n        if (!list.has(letter)) {\n            list.add(letter);\n        } else {\n            return false\n        }\n    }\n    return true;\n}\n/*\n * IMPORTANT: you cannot use additional data structures!\n * \n * SOLUTION: Compare every character of the string to every other character of \n * the string. This will take 0( n^2) time and 0(1) space.\n */\n/*\n * If we are allowed to modify the input string, we could sort the string in \n * O(n log(n)) time and then linearly check the string for neighboring characters \n * that are identical. Careful, though: many sorting algorithms take up extra space.\n */\nfunction uniqueChar(str) {\n    for (const letter of str) {\n        if (str.indexOf(letter) !== str.lastIndexOf(letter)) {\n            return false;\n        }\n    }\n    return true;\n}"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["abcd"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_2": {
                "test_input": ["table"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_3": {
                "test_input": ["superman"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_4": {
                "test_input": ["aaaa"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            },
            "Test_5": {
                "test_input": ["supermarket"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            },
            "Test_6": {
                "test_input": ["fgjeW_fug"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            }
        }
    },
    "checkPermutation": {
        "refName": "checkPermutation",
        "refNumber": 4,
        "category": "String",
        "dificulty": "Easy",
        "title": "Check Permutation",
        "tags": ["Easy", "String"],
        "description": "<p>Write a function to check whether two given strings are Permutation of each other or not.</p><p>A Permutation of a string is another string that contains same characters, only the order of characters can be different.</p>",
        "examples": {
            "example1": {
                "input": "str1 = 'abcd';\nstr2 = 'dabc';",
                "output": "true"
            },
            "example2": {
                "input": "str1 = 'abcd';\nstr2 = 'mfd';",
                "output": "false"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function checkPermutation(str1, str2) {\n  // Write your solution...\n  return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// Solution 1\n/*\n * N = str1, M = str2\n * Time: O(N + M)\n * Additional space: O(N)\n */\nfunction checkPermutation(str1, str2) {\n  if (str1.length !== str2.length) return false;\n  const list = new Map();\n  for (const letter of str1) {\n    if (list.has(letter)) {\n      const val = list.get(letter);\n      list.set(letter, val + 1);\n    } else {\n      list.set(letter, 1);\n    }\n  }\n  for (const letter of str2) {\n    if (list.has(letter)) {\n      let val = list.get(letter);\n      list.set(letter, val - 1);\n      val = list.get(letter);\n      if (val === 0) list.delete(letter);\n    } else {\n      return false;\n    }\n  }\n  return list.size === 0;\n}\n/**\n * Sort both strings and check if they are equal afterwards. Permutations will\n * be identical sorted strings.\n *\n * N = |str1| && M = |str2|\n * Time: O(N lg N + M lg M)\n * Additional space: O(1) if able to modify original strings, O(N + M) otherwise\n */\nfunction isPermutationSorted(str1, str2) {\n  if (str1.length === 0 || str1.length !== str2.length) {\n    return false;\n  }\n  const arr1 = str1.split('');\n  const arr2 = str2.split('');\n  arr1.sort();\n  arr2.sort();\n  return arr1.every((v, i) => v === arr2[i]);\n}"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["abcd", "dabc"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_2": {
                "test_input": ["ABC", "BAC"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_3": {
                "test_input": ["hfWmdVpqcd", "mdVpqchfWd"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_4": {
                "test_input": ["abc", "adeg"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            },
            "Test_5": {
                "test_input": ["opKrs", "abCd"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            },
            "Test_6": {
                "test_input": ["aabb", "abcd"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            }
        }
    },
    "palindromePermutation": {
        "refName": "palindromePermutation",
        "refNumber": 5,
        "category": "String",
        "dificulty": "Easy",
        "title": "Palindrome Permutation",
        "tags": ["Easy", "String"],
        "description": "<p>Write a function that checks whether any permutation of a string is a palindrome. The palindrome does not need to be limited to just dictionary words.</p><p>A palindrome is a word or phrase that is the same forwards and backwards.</p><p>A permutation is a rearrangement of letters.</p>",
        "examples": {
            "example1": {
                "input": "str1 = 'redivider';",
                "output": "true"
            },
            "example2": {
                "input": "str1 = 'house'",
                "output": "false"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function palindromePermutation(str) {\n    // Write your solution...\n    return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// Solution 1\nfunction palindromePermutation(str) {\n    let p1 = 0;\n    let p2 = str.length - 1;\n    while (p1 <= p2) {\n        if (str[p1] !== str[p2]) return false;\n        p1++;\n        p2--;\n    }\n    return true;\n}\n// Solution 2\nfunction palindromePermutation(str) {\n    for (let i = 0; i < str.length / 2; i++) {\n        if (str[i] !== str[str.length - 1 - i]) return false;\n    }   \n    return true;\n}"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["redivider"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_2": {
                "test_input": ["deified"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_3": {
                "test_input": ["_reviver_"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_4": {
                "test_input": ["kayak"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_5": {
                "test_input": ["fhe4"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            },
            "Test_6": {
                "test_input": ["A_fgp"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            },
            "Test_7": {
                "test_input": ["deified."],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            },
            "Test_8": {
                "test_input": ["a_ia"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            }
        }
    },
    "oneWay": {
        "refName": "oneWay",
        "refNumber": 6,
        "category": "String",
        "dificulty": "Easy",
        "title": "One Way",
        "tags": ["Easy", "String"],
        "description": "<p>There are three types of edits that can be performed on strings:</p>\n<ul>\n  <li>insert a character.</li>\n  <li>remove a character.</li>\n  <li>replace a character.</li>\n</ul>\n<p>Given two strings, write a function to check if they are one edit (or zero edits) away.</p>",
        "examples": {
            "example1": {
                "input": "str1 = 'geeks;\nstr2 = 'geek';",
                "output": "true"
            },
            "example2": {
                "input": "str1 = 'peaks';\nstr2 = 'geeks';",
                "output": "false"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function oneWay(str1, str2) {\n  // Write your solution...\n  return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// Solution 1\nfunction oneWay(str1, str2) {\n    const diff = Math.abs(str1.length - str2.length);\n    const maxLength = Math.max(str1.length, str2.length);\n    if (diff > 1) return false;\n    let isEdited = 0;\n    for (let p1 = 0, p2 = 0; p1 < maxLength || p2 < maxLength; p1++, p2++) {\n        if (str1[p1] !== str2[p2]) {\n            isEdited++;\n            if (isEdited > 1) return false;\n            if(str1[p1] === str2[p2 + 1]) p2++;\n            if (str1[p1 + 1] === str2[p2]) p1++;\n        }\n    }\n    return true;\n}\n// Solution 2\nfunction oneWay(str1, str2) {\n    const diff = Math.abs(str1.length - str2.length);\n    const maxLength = Math.max(str1.length, str2.length);\n    if (diff > 1) return false;\n    let p1 = 0;\n    let p2 = 0;\n    let isEdited = 0;\n    while (p1 < maxLength || p2 < maxLength) {\n        if (str1[p1] !== str2[p2]) {\n            isEdited++;\n            if (isEdited > 1) return false;\n            if(str1[p1] === str2[p2 + 1]) p2++;\n            if (str1[p1 + 1] === str2[p2]) p1++;\n        }\n        p1++;\n        p2++;\n    }\n    return true;\n}"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["geeks", "geek"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_2": {
                "test_input": ["book", "books"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_3": {
                "test_input": ["demon", "dem"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            },
            "Test_4": {
                "test_input": ["discovery", "discovery"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_5": {
                "test_input": ["Moon", "Moonlight"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            }
        }
    },
    "stringCompression": {
        "refName": "stringCompression",
        "refNumber": 7,
        "category": "String",
        "dificulty": "Easy",
        "title": "String Compression",
        "tags": ["Easy", "String"],
        "description": "<p>Implement a method to perform basic string compression using the counts of repeated characters. For example, the string aabcccccaaa would become a2blc5a3.</p><p>If the 'compressed' string would not become smaller than the original string, your method should return the original string. You can assume the string has only uppercase and lowercase letters (a - z).</p>",
        "examples": {
            "example1": {
                "input": "str1 = 'mdddoppppmmmm';",
                "output": "'m1d2d1o1p1m4'"
            },
            "example2": {
                "input": "str1 = 'abcd'",
                "output": "'abcd'"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function stringCompression(str) {\n    // Write your solution...\n    return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// n = length of string\n// Time: O(n)\n// Space: O(n)\nfunction stringCompression(str) {\n    let counter = 1;\n    const result = [];\n    for (let p2=0; p2<str.length; p2++) {\n        if (str[p2] === str[p2+1]) {\n            counter++;\n        }else {\n            result.push(str[p2] + counter);\n            counter = 1;\n        }\n    }\n    return result.join('').length > str.length ? str : result.join('');\n}\n// n = length of string\n// Time: O(n)\n// Space: O(n)\nfunction stringCompression(str) {\n    const result = [];\n    let p1 = 0;\n    let p2 = 0;\n    while(p1<= str.length){\n        if (str[p1] === str[p2]) {\n            p1++;\n        } else {\n            const num = p1 - p2;\n            result.push(str[p2] + num);\n            p2=p1;\n        }\n    }\n    return result.join('').length > str.length ? str : result.join('');\n}"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["mdddoppppmmmm"],
                "test_expected": "m1d3o1p4m4",
                "code_output": null,
                "passed_test": false
            },
            "Test_2": {
                "test_input": ["aabcccccaaa"],
                "test_expected": "a2b1c5a3",
                "code_output": null,
                "passed_test": false
            },
            "Test_3": {
                "test_input": ["abcd"],
                "test_expected": "abcd",
                "code_output": null,
                "passed_test": false
            },
            "Test_4": {
                "test_input": ["doopwwwwwvvvvvvvmsssssssdkjkzzzpp"],
                "test_expected": "d1o2p1w5v7m1s7d1k1j1k1z3p2",
                "code_output": null,
                "passed_test": false
            },
            "Test_5": {
                "test_input": ["cbdklwysmdsh"],
                "test_expected": "cbdklwysmdsh",
                "code_output": null,
                "passed_test": false
            },
            "Test_6": {
                "test_input": ["abcdefghijklmnopqrst"],
                "test_expected": "abcdefghijklmnopqrst",
                "code_output": null,
                "passed_test": false
            }
        }
    },
    "numJewelsInStones": {
        "refName": "numJewelsInStones",
        "refNumber": 8,
        "category": "String",
        "dificulty": "Easy",
        "title": "Num Jewels In Stones",
        "tags": ["Easy", "String"],
        "description": "<p>You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.</p><p>Letters are case sensitive, so 'a' is considered a different type of stone from 'A'.</p>",
        "examples": {
            "example1": {
                "input": "jewels = 'aA';\nstones = 'aAAbbbb';",
                "output": "3"
            },
            "example2": {
                "input": "jewels = 'z';\nstones = 'ZZ';",
                "output": "0"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function numJewelsInStones(J, S) {\n    // Write your solution...\n    return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// solution 1\nfunction numJewelsInStones(J, S) {\n   let result = 0;\n   for (let char of S) {\n       if (J.includes(char)) result++;\n   }\n    \n    return result;\n}\n// solution 2\nfunction numJewelsInStones(J, S) {\n   let result = 0;\n   const list = new Set();\n   for (let char of J) {\n       list.add(char);\n   }\n   for (let char of S) {\n       if (list.has(char)) result++;\n   }\n    \n    return result;\n}"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["aA", "aAAbbbb"],
                "test_expected": 3,
                "code_output": null,
                "passed_test": false
            },
            "Test_2": {
                "test_input": ["z", "ZZ"],
                "test_expected": 0,
                "code_output": null,
                "passed_test": false
            }
        }
    },
    "maximumBalancedStringPartitions": {
        "refName": "maximumBalancedStringPartitions",
        "refNumber": 9,
        "category": "String",
        "dificulty": "Easy",
        "title": "Maximum Balanced String Partitions",
        "tags": ["Easy", "String"],
        "description": "<p>Given a balanced string str of size N with an equal number of L and R, the task is to find a maximum number X, such that a given string can be partitioned into X balanced substring. A string called to be balanced if the number of ‘L’s in the string equals the number of ‘R’s.</p>",
        "examples": {
            "example1": {
                "input": "str = 'LRLLRRLRRL';",
                "output": "4 // { 'LR', 'LLRR', 'LR', 'RL'} are the possible partitions."
            },
            "example2": {
                "input": "'LRRRRLLRLLRL'",
                "output": "3 //{'LR', 'RRRLLRLL', “RL”} are the possible partitions."
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function maximumBalancedStringPartitions(str, n) {\n// Write your solution...\nreturn true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// solution 1\nfunction maximumBalancedStringPartitions(str) {\nlet L = 0;\nlet R = 0;\nlet LBlock = false;\nlet RBlock = false;\nlet result = 0;\nfor (let char of str) {\nif (char === 'L') {\nif (LBlock) {\nL++;\n} else {\nL = 1;\nLBlock = true;\nRBlock = false;\n}\n}\nif (char === 'R') {\nif (RBlock) {\nR++;\n} else {\nR = 1;\nLBlock = false;\nRBlock = true;\n}\n}\nif (R === L) {\nresult++;\nR = 0;\nL = 0;\n}\n}\nreturn result;\n}"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["LRLLRRLRRL", 10],
                "test_expected": 4,
                "code_output": null,
                "passed_test": false
            },
            "Test_2": {
                "test_input": ["LRRRRLLRLLRL", 12],
                "test_expected": 3,
                "code_output": null,
                "passed_test": false
            },
            "Test_3": {
                "test_input": ["LLLLRLLRRLRLLLRRRLLLRRLLLLRRLLRRLR", 12],
                "test_expected": 9,
                "code_output": null,
                "passed_test": false
            }
        }
    },
    "shuffleString": {
        "refName": "shuffleString",
        "refNumber": 10,
        "category": "String",
        "dificulty": "Easy",
        "title": "Shuffle String",
        "tags": ["Easy", "String"],
        "description": "<p>You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.</p>",
        "examples": {
            "example1": {
                "input": "s = 'codeleet';\nindices = [4,5,6,7,0,2,1,3];",
                "output": "'leetcode'"
            },
            "example2": {
                "input": "s = 'abc';\nindices = [0,1,2];",
                "output": "'abc"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function shuffleString(s, indices) {\n// Write your solution...\nreturn true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// solution 1\nfunction shuffleString(s, indices) {\nconst result = new Array(s.length).fill(0);\nfor (let i = 0; i < s.length; i++) {\nresult[indices[i]] = s[i];\n}\nreturn result.join('');\n}"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["codeleet", [4, 5, 6, 7, 0, 2, 1, 3]],
                "test_expected": "leetcode",
                "code_output": null,
                "passed_test": false
            },
            "Test_2": {
                "test_input": ["abc", [0, 1, 2]],
                "test_expected": "abc",
                "code_output": null,
                "passed_test": false
            }
        }
    },
    "toLowerCase": {
        "refName": "toLowerCase",
        "refNumber": 11,
        "category": "String",
        "dificulty": "Easy",
        "title": "To LowerCase",
        "tags": ["Easy", "String"],
        "description": "<p>Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.</p>",
        "examples": {
            "example1": {
                "input": "'HELLO",
                "output": "'hello'"
            },
            "example2": {
                "input": "'LOVELY'",
                "output": "'lovely'"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function toLowerCase(s) {\n// Write your solution...\nreturn true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// solution 1\nfunction toLowerCase(s) {\nlet ans = ''\nfor (let c of s) {\nlet n = c.charCodeAt()\nans += n > 64 && n < 91 ? String.fromCharCode(n + 32) : c\n}\nreturn ans\n};"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["Hello"],
                "test_expected": "hello",
                "code_output": null,
                "passed_test": false
            },
            "Test_2": {
                "test_input": ["here"],
                "test_expected": "here",
                "code_output": null,
                "passed_test": false
            },
            "Test_3": {
                "test_input": ["LOVELY"],
                "test_expected": "lovely",
                "code_output": null,
                "passed_test": false
            }
        }
    },
    "uniqueMorseWords": {
        "refName": "uniqueMorseWords",
        "refNumber": 12,
        "category": "String",
        "dificulty": "Easy",
        "title": "Unique Morse Words",
        "tags": ["Easy", "String"],
        "description": "<p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:</p>\n<p>'a' maps to '.-', 'b' maps to '-...', 'c' maps to '-.-.', and so on.</p>\n<p>For convenience, the full table for the 26 letters of the English alphabet is given below:</p>\n<p>['.-','-...','-.-.','-..','.','..-.','--.','....','..','.---','-.-','.-..','--','-.','---','.--.','--.-','.-.','...','-','..-','...-','.--','-..-','-.--','--..']</p>\n<p>Given an array of strings words where each word can be written as a concatenation of the Morse code of each letter. For example, 'cab' can be written as '-.-..--...', which is the concatenation of '-.-.', '.-', and '-...'. We will call such a concatenation the transformation of a word.</p>\n<p>Return the number of different transformations among all words we have. Constraints:</p>\n<ul>\n<li>\nThe length of words will be at most 100.\n</li>\n<li>\nEach words[i] will have length in range [1, 12].\n</li>\n<li>\nwords[i] will only consist of lowercase letters.\n</li>\n</ul>",
        "examples": {
            "example1": {
                "input": "words = ['gin', 'zen', 'gig', 'msg']",
                "output": "2\n// gin -> '--...-.'\nzen -> '--...-.'\ngig -> '--...--.''\nmsg' -> '--...--.'"
            },
            "example2": {
                "input": "words = ['a']",
                "output": "1"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function uniqueMorseWords(words) {\n  // Write your solution...\n  return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// solution 1\nfunction uniqueMorseWords(words) {\nconst morseCodes = ['.-', '-...', '-.-.', '-..', '.', '..-.', '--.', '....', '..', '.---', '-.-', '.-..', '--', '-.', '---', '.--.', '--.-', '.-.', '...', '-', '..-', '...-', '.--', '-..-', '-.--', '--..'];\nlet morseWords = [];\nlet word;\nfor (let i = 0; i < words.length; i++) {\nword = words[i].split('').map((c) => morseCodes[c.charCodeAt(0) - 97]).join('');\nif (morseWords.indexOf(word) === -1) {\nmorseWords.push(word);\n}\n}\nreturn morseWords.length;\n}"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": [["zocd", "gjkl", "hzqk", "hzgq", "gjkl"]],
                "test_expected": 2,
                "code_output": null,
                "passed_test": false
            },
            "Test_2": {
                "test_input": [["yxmine", "yxzd", "eljys", "uiaopi", "pwlk"]],
                "test_expected": 3,
                "code_output": null,
                "passed_test": false
            },
            "Test_3": {
                "test_input": [["gin", "zen", "gig", "msg"]],
                "test_expected": 2,
                "code_output": null,
                "passed_test": false
            },
            "Test_4": {
                "test_input": [["a"]],
                "test_expected": 1,
                "code_output": null,
                "passed_test": false
            }
        }
    },
    "robotReturnToOrigin": {
        "refName": "robotReturnToOrigin",
        "refNumber": 13,
        "category": "String",
        "dificulty": "Easy",
        "title": "Robot Return To Origin",
        "tags": ["Easy", "String"],
        "description": "<p>There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.</p><p>You are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. Valid moves are 'R' (right), 'L' (left), 'U' (up), and 'D' (down). Return true if the robot returns to the origin after it finishes all of its moves, or false otherwise.</p><p>Note: The way that the robot is 'facing' is irrelevant. 'R' will always make the robot move to the right once, 'L' will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.</p><p>Constraints:</p><p>1 <= moves.length <= 2 * 104 moves only contains the characters 'U', 'D', 'L' and 'R'.</p>",
        "examples": {
            "example1": {
                "input": "moves = 'UD'",
                "output": "true\n// Explanation:The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true."
            },
            "example2": {
                "input": "moves = 'LL'",
                "output": "false\nExplanation: The robot moves left twice. It ends up two 'moves' to the left of the origin. We return false because it is not at the origin at the end of its moves."
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function robotReturnToOrigin(moves) {\n    // Write your solution...\n    return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// solution 1\nfunction robotReturnToOrigin(moves) {\n    let x = 0, y = 0;\n    for (let move of moves) {\n        if (move == 'U') y -= 1\n        if (move == 'D') y += 1\n        if (move == 'L') x -= 1\n        if (move == 'R') x += 1\n    }\n    return x == 0 && y == 0;\n}"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["UD"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
            },
            "Test_2": {
                "test_input": ["LL"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
            }
        }
    },
    "reverseString": {
        "refName": "reverseString",
        "refNumber": 14,
        "category": "String",
        "dificulty": "Easy",
        "title": "Reverse String",
        "tags": ["Easy", "String"],
        "description": "<p>Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory.</p>",
        "examples": {
            "example1": {
                "input": "str = ['h','e','l','l','o']",
                "output": "['o','l','l','e','h']"
            },
            "example2": {
                "input": "str = ['H','a','n','n','a','h']",
                "output": "['h','a','n','n','a','H']"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function reverseString(s) {\n    // Write your solution...\n    return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// solution 1\nfunction reverseString(s) {\n    for (let i = 0; i < s.length/2; i++) {\n        let n = s[i]\n        s[i] = s[s.length-i-1]\n        s[s.length-i-1] = n\n    }\n    return s\n}"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": [["h", "e", "l", "l", "o"]],
                "test_expected": ["o", "l", "l", "e", "h"],
                "code_output": null,
                "passed_test": false
            },
            "Test_2": {
                "test_input": [["H", "a", "n", "n", "a", "h"]],
                "test_expected": ["h", "a", "n", "n", "a", "H"],
                "code_output": null,
                "passed_test": false
            }
        }
    },
    "implementStrStr": {
        "refName": "implementStrStr",
        "refNumber": 15,
        "category": "String",
        "dificulty": "Easy",
        "title": "Implement StrStr",
        "tags": ["Easy", "String"],
        "description": "<p>Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p><p><b>Clarification:</b></p><p>What should we return when needle is an empty string? This is a great question to ask during an interview. For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().</p>",
        "examples": {
            "example1": {
                "input": "haystack = 'hello'\nneedle = 'll'",
                "output": "2"
            },
            "example2": {
                "input": "haystack = 'aaaaa', needle = 'bba'",
                "output": "-1"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function implementStrStr(haystack, needle)  {\n    // Write your solution...\n    return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// solution 1\nfunction implementStrStr(haystack, needle) {\n    if (needle.length === 0) return 0;\n    if (needle === haystack) return 0;\n    for (let i = 0; i <= haystack.length - needle.length; i++) {\n        if (needle === haystack.substring(i, i + needle.length)) {\n            return i;\n        }\n    }\n    return -1;\n};"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["hello", "ll"],
                "test_expected": 2,
                "code_output": null,
                "passed_test": false
              },
              "Test_2": {
                "test_input": ["aaaaa", "bba"],
                "test_expected": -1,
                "code_output": null,
                "passed_test": false
              },
              "Test_3": {
                "test_input": ["", ""],
                "test_expected": 0,
                "code_output": null,
                "passed_test": false
              }
        }
    },
    "validParentheses": {
        "refName": "validParentheses",
        "refNumber": 16,
        "category": "String",
        "dificulty": "Easy",
        "title": "Valid Parentheses",
        "tags": ["Easy", "String"],
        "description": "<p>Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.</p><p>Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order.</p>",
        "examples": {
            "example1": {
                "input": "s = '()'",
                "output": "true"
            },
            "example2": {
                "input": "s = '(]'",
                "output": "false"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function validParentheses(s) {\n    // Write your solution...\n    return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// solution 1\nfunction validParentheses(s) {\n    const stack = [];\n    const characters = { ')': '(', '}': '{', ']': '[' };\n    for (const char of s) {\n        if (!characters[char]) stack.push(char);\n        else if (stack.pop() !== characters[char]) {\n            return false;\n        }\n    }\n    return stack.length === 0;\n};"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["()"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
              },
              "Test_2": {
                "test_input": ["()[]{}"],
                "test_expected": true,
                "code_output": null,
                "passed_test": false
              },
              "Test_3": {
                "test_input": ["(]"],
                "test_expected": false,
                "code_output": null,
                "passed_test": false
              }
        }
    },
    "romanToInteger": {
        "refName": "romanToInteger",
        "refNumber": 17,
        "category": "String",
        "dificulty": "Easy",
        "title": "Roman To Integer",
        "tags": ["Easy", "String"],
        "description": "<p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000</p><p>For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p><ul><li>I can be placed before V (5) and X (10) to make 4 and 9.</li><li>X can be placed before L (50) and C (100) to make 40 and 90.</li><li>C can be placed before D (500) and M (1000) to make 400 and 900.</li></ul><p>Given a roman numeral, convert it to an integer.</p><p>Constraints:</p><p>1 <= s.length <= 15 s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M'). It is guaranteed that s is a valid roman numeral in the range [1, 3999].</p>",
        "examples": {
            "example1": {
                "input": "III",
                "output": "3"
            },
            "example2": {
                "input": "LVIII",
                "output": "58"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function romanToInteger(s) {\n    // Write your solution...\n    return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// solution 1\nfunction romanToInteger(s) {\n    const sym = { \n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    let result = 0;\n    for (i=0; i < s.length; i++){\n        const cur = sym[s[i]];\n        const next = sym[s[i+1]];\n        if (cur < next){\n            result += next - cur // IV -> 5 - 1 = 4\n            i++\n        } else {\n            result += cur\n        }\n    }\n    return result; \n};"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["III"],
                "test_expected": 3,
                "code_output": null,
                "passed_test": false
              },
              "Test_2": {
                "test_input": ["LVIII"],
                "test_expected": 58,
                "code_output": null,
                "passed_test": false
              },
              "Test_3": {
                "test_input": ["MCMXCIV"],
                "test_expected": 1994,
                "code_output": null,
                "passed_test": false
              },
              "Test_4": {
                "test_input": ["IV"],
                "test_expected": 4,
                "code_output": null,
                "passed_test": false
              }
        }
    },
    "uncompress": {
        "refName": "uncompress",
        "refNumber": 18,
        "category": "String",
        "dificulty": "Easy",
        "title": "Uncompress",
        "tags": ["Easy", "String"],
        "description": "<p>Write a function, uncompress, that takes in a string as an argument. The input string will be formatted into multiple groups according to the following pattern:</p><p><number><char></p><p>for example, '2c' or '3a'.</p><p>The function should return an uncompressed version of the string where each 'char' of a group is repeated 'number' times consecutively. You may assume that the input string is well-formed according to the previously mentioned pattern.</p>",
        "examples": {
            "example1": {
                "input": "str = '2c3a1t';",
                "output": "'ccaaat'"
            },
            "example2": {
                "input": "str = '4s2b';",
                "output": "'ssssbb'"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function uncompress(s) {\n  // Write your solution...\n  return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// solution 1\nfunction uncompress(s) {\n    const numbers = '0123456789';\n    const result = [];\n    let p1 = 0;\n    let p2 = 0;\n    while (p2 <= s.length) {\n        if (numbers.includes(s[p2])) {\n            p2++;\n        } else {\n            const val = Number(s.slice(p1, p2));\n            for (let x = 0; x < val; x++) {\n                result.push(s[p2]);\n            }\n            p2++;\n            p1 = p2;\n        }\n    }\n    return result.join('')\n}"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["2c3a1t"],
                "test_expected": "ccaaat",
                "code_output": null,
                "passed_test": false
              },
              "Test_2": {
                "test_input": ["4s2b"],
                "test_expected": "ssssbb",
                "code_output": null,
                "passed_test": false
              },
              "Test_3": {
                "test_input": ["2p1o5p"],
                "test_expected": "ppoppppp",
                "code_output": null,
                "passed_test": false
              },
              "Test_4": {
                "test_input": ["3n12e2z"],
                "test_expected": "nnneeeeeeeeeeeezz",
                "code_output": null,
                "passed_test": false
              },
              "Test_5": {
                "test_input": ["127y"],
                "test_expected": "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy",
                "code_output": null,
                "passed_test": false
              }
        }
    },
    "mostFrequentChar": {
        "refName": "mostFrequentChar",
        "refNumber": 19,
        "category": "String",
        "dificulty": "Easy",
        "title": "Most Frequent Char",
        "tags": ["Easy", "String"],
        "description": "<p>Write a function, mostFrequentChar, that takes in a string as an argument. The function should return the most frequent character of the string. If there are ties, return the character that appears earlier in the string.</p><p>You can assume that the input string is non-empty.</p>",
        "examples": {
            "example1": {
                "input": "str = 'bookeeper';",
                "output": "'e'"
            },
            "example2": {
                "input": "str = 'david';",
                "output": "'d'"
            }
        },
        "hints": {
            "hint_1": "...",
            "hint_2": "...",
            "hint_3": "...",
            "Optimal_Space__Time_Complexity": "..."
        },
        "startedCode": {
            "javaScript": "function mostFrequentChar(s) {\n  // Write your solution...\n  return true;\n}"
        },
        "solutionCode": {
            "javaScript": [
                "// solution 1\n// n = length of string\n// Time: O(n)\n// Space: O(n)\nfunction mostFrequentChar(s) {\n    const list = new Map();\n    for (const char of s) {\n        if (list.has(char)) {\n            const val = list.get(char);\n            list.set(char, val + 1);\n        } else {\n            list.set(char, 1);\n        }\n    }\n    let best = null;\n    for (const char of s) {\n        if (best === null || list.get(char) > list.get(best)) {\n            best = char;\n        }\n    }\n    return best;\n}"
            ]
        },
        "submittedCode": {
            "javaScript": ""
        },
        "testCases": {
            "Test_1": {
                "test_input": ["bookeeper"],
                "test_expected": "e",
                "code_output": null,
                "passed_test": false
              },
              "Test_2": {
                "test_input": ["david"],
                "test_expected": "d",
                "code_output": null,
                "passed_test": false
              },
              "Test_3": {
                "test_input": ["abby"],
                "test_expected": "b",
                "code_output": null,
                "passed_test": false
              },
              "Test_4": {
                "test_input": ["mississippi"],
                "test_expected": "i",
                "code_output": null,
                "passed_test": false
              },
              "Test_5": {
                "test_input": ["potato"],
                "test_expected": "o",
                "code_output": null,
                "passed_test": false
              },
              "Test_6": {
                "test_input": ["eleventennine"],
                "test_expected": "e",
                "code_output": null,
                "passed_test": false
              },
              "Test_7": {
                "test_input": ["riverbed"],
                "test_expected": "r",
                "code_output": null,
                "passed_test": false
              }
        }
    }
}
